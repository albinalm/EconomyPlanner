@page "/incomes"
@using EconomyPlanner.Web.Services.Interfaces
@using EconomyPlanModel = EconomyPlanner.Web.Models.EconomyPlanModel
@using EconomyPlanner.Web.Models
@using EconomyPlanner.Web.Shared.Income
@inject NavigationManager NavManager

<PageTitle>Incomes</PageTitle>

<h1>Nuvarande inkomster</h1>
<br/>

<div>
    <b>Vald ekonomiplan:</b>
</div>
<Dropdown TItem="EconomyPlanModel" OnSelected="@OnSelected">
    <InitialTip>@InitialEconomyPlanName</InitialTip>
    <ChildContent>
        @foreach (var plan in _economyPlanModels)
        {
            <DropdownListItem Item="@plan">@plan.Name</DropdownListItem>
        }
    </ChildContent>
</Dropdown>

<div class="alert alert-secondary mt-4">
    <div>
        <div class="row">
            <div class="col-md">
                <b>Typ: </b>
            </div>
            <div class="col-md">
                <b>Namn: </b>
            </div>
            <div class="col-md">
                <b>Belopp: </b>
            </div>
            <div class="col-md">
            </div>
        </div>
        <hr/>
        @foreach (var income in _incomeModels)
        {
            <div class="row">
                <div class="col-md text-left">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditTypePopup(income))">@income.IncomeType</button>
                    </div>
                </div>
                <div class="col-md">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditNamePopup(income))">@income.Name</button>
                    </div>
                </div>
                <div class="col-md">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditAmountPopup(income))">@income.Amount</button>
                    </div>
                </div>
                <div class="col-md">
                    <button class="btn btn-danger btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowDeletePopup("Are you sure you wish to delete ", income))">
                        Ta bort
                    </button>
                </div>
            </div>
            <br/>
        }
    </div>
    <div>
        <button class="btn btn-success text-left oi oi-plus @GetDisabledButtonClass()" onclick="@ShowAddIncomePopup"></button>
        <p class="float-right font-weight-bold">Totalbelopp: @TotalIncomeCost:-</p>
    </div>

</div>
<br/><hr/><br/>
<h4>Återkommande inkomster:</h4>
<div class="alert alert-secondary mt-4">
    <div>
        <div class="row">
            <div class="col-md">
                <b>Typ: </b>
            </div>
            <div class="col-md">
                <b>Namn: </b>
            </div>
            <div class="col-md">
                <b>Belopp: </b>
            </div>
            <div class="col-md">
            </div>
        </div>
        <hr/>
        @foreach (var recurringIncome in _recurringIncomes)
        {
            <div class="row">
                <div class="col-md text-left">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditRecurringTypePopup(recurringIncome))">@recurringIncome.IncomeType</button>
                    </div>
                </div>
                <div class="col-md">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditRecurringNamePopup(recurringIncome))">@recurringIncome.Name</button>
                    </div>
                </div>
                <div class="col-md">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditRecurringAmountPopup(recurringIncome))">@recurringIncome.Amount</button>
                    </div>
                </div>
                <div class="col-md">
                    <button class="btn btn-danger btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowDeleteRecurringPopup("Are you sure you wish to delete recurring income: ", recurringIncome))">
                        Ta bort
                    </button>
                    <button class="btn btn-success btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => AddIncomeFromRecurringIncome(recurringIncome))">
                        Lägg till i nuvarande ekonomiplan
                    </button>
                </div>
            </div>
            <br/>
        }
    </div>
    <button class="btn btn-success text-left oi oi-plus @GetDisabledButtonClass()" onclick="@ShowAddRecurringIncomePopup"></button>
    <p class="float-right font-weight-bold">Totalbelopp: @TotalRecurringIncomeCost:-</p>
</div>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    [Inject]
    private IEconomyPlanService EconomyPlanService { get; set; } = null!;

    [Inject]
    private IIncomeService IncomeService { get; set; } = null!;

    [Inject]
    private IHouseholdService HouseholdService { get; set; } = null!;

    private EconomyPlanModel? SelectedEconomyPlan { get; set; }
    private List<IncomeModel> _incomeModels = new();
    private List<IncomeModel> _recurringIncomes = new();
    private List<EconomyPlanModel> _economyPlanModels = new();
    private List<EconomyPlanModel> _activeEconomyPlanModels = new();
    private string InitialEconomyPlanName { get; set; } = "";

    private string GetDisabledButtonClass()
    {
        if (SelectedEconomyPlan is null) return "disabled";
        
        return SelectedEconomyPlan.IsActive ? string.Empty : "disabled";
    }
    
    private decimal TotalIncomeCost
    {
        get { return _incomeModels.Select(e => e.Amount).Sum(); }
    }

    private decimal TotalRecurringIncomeCost
    {
        get { return _recurringIncomes.Select(e => e.Amount).Sum(); }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!await HouseholdService.HasSavedLogin())
            NavManager.NavigateTo("/login");
        else
            await InitializePage();
    }

    private async Task InitializePage()
    {
        await GetEconomyPlanModes();
        if (_economyPlanModels.Any())
        {
            SelectedEconomyPlan = _activeEconomyPlanModels.FirstOrDefault() ?? _economyPlanModels.First();
            InitialEconomyPlanName = SelectedEconomyPlan.Name;
            _incomeModels = (await IncomeService.GetIncomes(SelectedEconomyPlan)).ToList();
            await GetRecurringIncomes();
        }
    }

    private async Task RefreshIncomes()
    {
        await GetEconomyPlanModes();
        if (_economyPlanModels.Any())
        {
            _incomeModels = (await IncomeService.GetIncomes(_economyPlanModels.First(e => e.Id == SelectedEconomyPlan!.Id))).ToList();
        }
    }

    private async Task GetRecurringIncomes()
    {
        _recurringIncomes = (await HouseholdService.GetRecurringIncomes()).ToList();
    }

    private async Task GetEconomyPlanModes()
    {
        _economyPlanModels = (await EconomyPlanService.GetEconomyPlans()).ToList();
        _activeEconomyPlanModels = _economyPlanModels.Where(ep => ep.IsActive).ToList();
    }

    private async Task OnSelected(EconomyPlanModel selection)
    {
        _incomeModels = (await IncomeService.GetIncomes(selection)).ToList();
        SelectedEconomyPlan = selection;
    }

    private async Task ShowDeletePopup(string preText, IncomeModel incomeModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;
        
        var parameters = new ModalParameters()
            .Add(nameof(DeleteIncome.PreText), preText)
            .Add(nameof(DeleteIncome.IncomeModel), incomeModel);

        var result = await Modal.Show<DeleteIncome>("Ta bort?", parameters).Result;

        if (result.Confirmed)
        {
            await RefreshIncomes();
            await GetRecurringIncomes();
        }
    }

    private async Task ShowEditAmountPopup(IncomeModel incomeModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;
        
        var parameters = new ModalParameters()
            .Add(nameof(EditIncomeAmount.IncomeModel), incomeModel);

        var result = await Modal.Show<EditIncomeAmount>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await RefreshIncomes();
        }
    }

    private async Task ShowEditNamePopup(IncomeModel incomeModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;
        
        var parameters = new ModalParameters()
            .Add(nameof(EditIncomeName.IncomeModel), incomeModel);

        var result = await Modal.Show<EditIncomeName>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await RefreshIncomes();
        }
    }

    private async Task ShowEditTypePopup(IncomeModel incomeModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;
        
        var parameters = new ModalParameters()
            .Add(nameof(EditIncomeType.IncomeModel), incomeModel)
            .Add(nameof(EditIncomeType.IncomeTypes), await IncomeService.GetIncomeTypes());

        var result = await Modal.Show<EditIncomeType>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await RefreshIncomes();
        }
    }

    private async Task ShowAddIncomePopup()
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;
        
        var guid = await HouseholdService.GetGuid();

        if (string.IsNullOrEmpty(guid)) return;

        var parameters = new ModalParameters()
            .Add(nameof(AddIncomeForm.IncomeTypes), await IncomeService.GetIncomeTypes())
            .Add(nameof(AddIncomeForm.EconomyPlanModel), SelectedEconomyPlan)
            .Add(nameof(AddIncomeForm.HouseholdGuid), guid);

        var result = await Modal.Show<AddIncomeForm>("Lägg till en ny inkomst", parameters).Result;

        if (result.Confirmed)
        {
            await RefreshIncomes();
            await GetRecurringIncomes();
        }
    }

    private async Task ShowAddRecurringIncomePopup()
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;
        
        var guid = await HouseholdService.GetGuid();

        if (string.IsNullOrEmpty(guid)) return;

        var parameters = new ModalParameters()
            .Add(nameof(AddRecurringIncomeForm.IncomeTypes), await IncomeService.GetIncomeTypes())
            .Add(nameof(AddRecurringIncomeForm.HouseholdGuid), guid);

        var result = await Modal.Show<AddRecurringIncomeForm>("Lägg till en ny återkommande inkomst", parameters).Result;

        if (result.Confirmed)
        {
            await GetRecurringIncomes();
        }
    }

    private async Task ShowEditRecurringAmountPopup(IncomeModel incomeModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;
        
        var parameters = new ModalParameters()
            .Add(nameof(EditRecurringIncomeAmount.RecurringIncomeModel), incomeModel);

        var result = await Modal.Show<EditRecurringIncomeAmount>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await GetRecurringIncomes();
        }
    }

    private async Task ShowEditRecurringNamePopup(IncomeModel incomeModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;
        
        var parameters = new ModalParameters()
            .Add(nameof(EditRecurringIncomeName.RecurringIncomeModel), incomeModel);

        var result = await Modal.Show<EditRecurringIncomeName>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await GetRecurringIncomes();
        }
    }

    private async Task ShowEditRecurringTypePopup(IncomeModel incomeModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;
        
        var parameters = new ModalParameters()
            .Add(nameof(EditRecurringIncomeType.RecurringIncomeModel), incomeModel)
            .Add(nameof(EditRecurringIncomeType.IncomeTypes), await IncomeService.GetIncomeTypes());

        var result = await Modal.Show<EditRecurringIncomeType>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await GetRecurringIncomes();
        }
    }

    private async Task ShowDeleteRecurringPopup(string preText, IncomeModel incomeModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;
        
        var parameters = new ModalParameters()
            .Add(nameof(DeleteRecurringIncome.PreText), preText)
            .Add(nameof(DeleteRecurringIncome.RecurringIncomeModel), incomeModel);

        var result = await Modal.Show<DeleteRecurringIncome>("Ta bort?", parameters).Result;

        if (result.Confirmed)
        {
            await GetRecurringIncomes();
        }
    }

    private async Task AddIncomeFromRecurringIncome(IncomeModel incomeModel)
    {
        await IncomeService.AddRecurringIncomeAsIncome(incomeModel, SelectedEconomyPlan);
        await RefreshIncomes();
    }

}