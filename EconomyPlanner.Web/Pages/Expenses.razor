@page "/expenses"
@using EconomyPlanner.Web.Services.Interfaces
@using EconomyPlanModel = EconomyPlanner.Web.Models.EconomyPlanModel
@using ExpenseModel = EconomyPlanner.Web.Models.ExpenseModel
@using EconomyPlanner.Web.Shared.Expense
@using EconomyPlanner.Web.Extensions
@inject NavigationManager NavManager

<PageTitle>Utgifter för vald ekonomiplan</PageTitle>
<br/>
<h1 class="text-success bi bi-credit-card-fill"> Utgifter för vald ekonomiplan</h1>
<br/>
<hr/>
<br/>
<div class="pb-2">
    <b class="text-dark bi bi-calendar-range-fill"> Period:</b>
</div>
<Dropdown TItem="EconomyPlanModel" OnSelected="@OnSelected">
    <InitialTip>@InitialEconomyPlanName</InitialTip>
    <ChildContent>
        @foreach (var plan in _economyPlanModels)
        {
            <DropdownListItem Item="@plan">@plan.Name</DropdownListItem>
        }
    </ChildContent>
</Dropdown>

<div class="alert alert-info mt-4">
    <div>
        <div class="row">
            <div class="col-md">
                <b>Namn: </b>
            </div>
            <div class="col-md">
                <b>Belopp: </b>
            </div>
            <div class="col-md">
                <b>Typ: </b>
            </div>
            <div class="col-md">
            </div>
        </div>
        <hr/>
        @foreach (var expense in _expenseModels)
        {
            <div class="row">
                <div class="col-md-2 text-left">
                    <div class="span2">
                        <button class="btn btn-light btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditNamePopup(expense))">@expense.Name</button>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="span2">
                        <button class="btn btn-light btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditAmountPopup(expense))">@expense.Amount.ToNumberFormatString():-</button>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="span2">
                        <button class="btn btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditTypePopup(expense))">@expense.ExpenseType</button>
                    </div>
                </div>
                <div class="col-md">
                    <button class="btn btn-danger btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowDeletePopup("Är du säker på att du vill ta bort ", expense))">
                        Delete
                    </button>
                </div>
            </div>
            <br/>
        }
    </div>
    <div>
        <button class="btn btn-success text-left oi oi-plus @GetDisabledButtonClass()" onclick="@ShowAddExpensePopup"></button>
        <p class="float-right font-weight-bold">Totalbelopp: @TotalExpenseCost.ToNumberFormatString():-</p>
    </div>

</div>
<br/><hr/><br/>
<h4 class="bi bi-arrow-clockwise"> Återkommande utgifter:</h4>
<div class="alert alert-info mt-4">
    <div>
        <div class="row">
            <div class="col-md">
                <b>Typ: </b>
            </div>
            <div class="col-md">
                <b>Namn: </b>
            </div>
            <div class="col-md">
                <b>Belopp: </b>
            </div>
            <div class="col-md">
            </div>
        </div>
        <hr/>
        @foreach (var recurringExpense in _recurringExpenses)
        {
            <div class="row">
                <div class="col-md text-left">
                    <div class="span2">
                        <button class="btn btn-light btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditRecurringTypePopup(recurringExpense))">@recurringExpense.ExpenseType</button>
                    </div>
                </div>
                <div class="col-md">
                    <div class="span2">
                        <button class="btn btn-light btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditRecurringNamePopup(recurringExpense))">@recurringExpense.Name</button>
                    </div>
                </div>
                <div class="col-md">
                    <div class="span2">
                        <button class="btn btn-light btn-block btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowEditRecurringAmountPopup(recurringExpense))">@recurringExpense.Amount.ToNumberFormatString():-</button>
                    </div>
                </div>
                <div class="col-md">
                    <button class="btn btn-danger btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => ShowDeleteRecurringPopup("Är du säker på att du vill ta bort återkommande utgift ", recurringExpense))">
                        Ta bort
                    </button>
                    <button class="btn btn-success btn-sm text-left @GetDisabledButtonClass()" @onclick="@(_ => AddExpenseFromRecurringExpense(recurringExpense, SelectedEconomyPlan))">
                        Lägg till i nuvarande ekonomiplan
                    </button>
                </div>
            </div>
            <br/>
        }
    </div>
    <button class="btn btn-success text-left oi oi-plus @GetDisabledButtonClass()" onclick="@ShowAddRecurringExpensePopup"></button>
    <p class="float-right font-weight-bold">Totalbelopp: @TotalRecurringExpenseCost.ToNumberFormatString():-</p>
</div>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    [Inject]
    private IEconomyPlanService EconomyPlanService { get; set; } = null!;

    [Inject]
    private IExpenseService ExpenseService { get; set; } = null!;

    [Inject]
    private IHouseholdService HouseholdService { get; set; } = null!;

    private EconomyPlanModel? SelectedEconomyPlan { get; set; }
    private List<ExpenseModel> _expenseModels = new();
    private List<ExpenseModel> _recurringExpenses = new();
    private List<EconomyPlanModel> _economyPlanModels = new();
    private List<EconomyPlanModel> _activeEconomyPlanModels = new();
    private string InitialEconomyPlanName { get; set; } = "";

    private string GetDisabledButtonClass()
    {
        if (SelectedEconomyPlan is null) return "disabled";

        return SelectedEconomyPlan.IsActive ? string.Empty : "disabled";
    }

    private decimal TotalExpenseCost
    {
        get { return _expenseModels.Select(e => e.Amount).Sum(); }
    }

    private decimal TotalRecurringExpenseCost
    {
        get { return _recurringExpenses.Select(e => e.Amount).Sum(); }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!await HouseholdService.HasSavedLogin())
            NavManager.NavigateTo("/login");
        else
            await InitializePage();
    }

    private async Task InitializePage()
    {
        await GetEconomyPlanModels();
        if (_economyPlanModels.Any())
        {
            SelectedEconomyPlan = _activeEconomyPlanModels.FirstOrDefault() ?? _economyPlanModels.First();
            InitialEconomyPlanName = SelectedEconomyPlan.Name;
            _expenseModels = (await ExpenseService.GetExpenses(SelectedEconomyPlan)).ToList();
            await GetRecurringExpenses();
        }
    }

    private async Task RefreshExpenses()
    {
        await GetEconomyPlanModels();
        if (_economyPlanModels.Any())
        {
            _expenseModels = (await ExpenseService.GetExpenses(_economyPlanModels.First(e => e.Id == SelectedEconomyPlan!.Id))).ToList();
        }
    }

    private async Task GetRecurringExpenses()
    {
        _recurringExpenses = (await HouseholdService.GetRecurringExpenses()).ToList();
    }

    private async Task GetEconomyPlanModels()
    {
        _economyPlanModels = (await EconomyPlanService.GetEconomyPlans()).ToList();
        _activeEconomyPlanModels = _economyPlanModels.Where(ep => ep.IsActive).ToList();
    }

    private async Task OnSelected(EconomyPlanModel selection)
    {
        _expenseModels = (await ExpenseService.GetExpenses(selection)).ToList();
        SelectedEconomyPlan = selection;
    }

    private async Task ShowDeletePopup(string preText, ExpenseModel expenseModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;

        var parameters = new ModalParameters()
            .Add(nameof(DeleteExpense.PreText), preText)
            .Add(nameof(DeleteExpense.ExpenseModel), expenseModel);

        var result = await Modal.Show<DeleteExpense>("Ta bort?", parameters).Result;

        if (result.Confirmed)
        {
            await RefreshExpenses();
            await GetRecurringExpenses();
        }
    }

    private async Task ShowEditAmountPopup(ExpenseModel expenseModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;

        var parameters = new ModalParameters()
            .Add(nameof(EditExpenseAmount.ExpenseModel), expenseModel);

        var result = await Modal.Show<EditExpenseAmount>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await RefreshExpenses();
        }
    }

    private async Task ShowEditNamePopup(ExpenseModel expenseModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;

        var parameters = new ModalParameters()
            .Add(nameof(EditExpenseName.ExpenseModel), expenseModel);

        var result = await Modal.Show<EditExpenseName>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await RefreshExpenses();
        }
    }

    private async Task ShowEditTypePopup(ExpenseModel expenseModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;

        var parameters = new ModalParameters()
            .Add(nameof(EditExpenseType.ExpenseModel), expenseModel)
            .Add(nameof(EditExpenseType.ExpenseTypes), await ExpenseService.GetExpenseTypes());

        var result = await Modal.Show<EditExpenseType>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await RefreshExpenses();
        }
    }

    private async Task ShowAddExpensePopup()
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;

        var guid = await HouseholdService.GetGuid();

        if (string.IsNullOrEmpty(guid)) return;

        var parameters = new ModalParameters()
            .Add(nameof(AddExpenseForm.ExpenseTypes), await ExpenseService.GetExpenseTypes())
            .Add(nameof(AddExpenseForm.EconomyPlanModel), SelectedEconomyPlan)
            .Add(nameof(AddExpenseForm.HouseholdGuid), guid);

        var result = await Modal.Show<AddExpenseForm>("Lägg till en ny utgift", parameters).Result;

        if (result.Confirmed)
        {
            await RefreshExpenses();
            await GetRecurringExpenses();
        }
    }

    private async Task ShowAddRecurringExpensePopup()
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;

        var guid = await HouseholdService.GetGuid();

        if (string.IsNullOrEmpty(guid)) return;

        var parameters = new ModalParameters()
            .Add(nameof(AddExpenseForm.ExpenseTypes), await ExpenseService.GetExpenseTypes())
            .Add(nameof(AddExpenseForm.HouseholdGuid), guid);

        var result = await Modal.Show<AddRecurringExpenseForm>("Lägg till en ny återkommande utgift", parameters).Result;

        if (result.Confirmed)
        {
            await GetRecurringExpenses();
        }
    }

    private async Task ShowEditRecurringAmountPopup(ExpenseModel expenseModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;

        var parameters = new ModalParameters()
            .Add(nameof(EditRecurringExpenseAmount.RecurringExpenseModel), expenseModel);

        var result = await Modal.Show<EditRecurringExpenseAmount>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await GetRecurringExpenses();
        }
    }

    private async Task ShowEditRecurringNamePopup(ExpenseModel expenseModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;

        var parameters = new ModalParameters()
            .Add(nameof(EditRecurringExpenseName.RecurringExpenseModel), expenseModel);

        var result = await Modal.Show<EditRecurringExpenseName>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await GetRecurringExpenses();
        }
    }

    private async Task ShowEditRecurringTypePopup(ExpenseModel expenseModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;

        var parameters = new ModalParameters()
            .Add(nameof(EditRecurringExpenseType.RecurringExpenseModel), expenseModel)
            .Add(nameof(EditRecurringExpenseType.ExpenseTypes), await ExpenseService.GetExpenseTypes());

        var result = await Modal.Show<EditRecurringExpenseType>("Redigera", parameters).Result;

        if (result.Confirmed)
        {
            await GetRecurringExpenses();
        }
    }

    private async Task ShowDeleteRecurringPopup(string preText, ExpenseModel expenseModel)
    {
        if (SelectedEconomyPlan is null || !SelectedEconomyPlan.IsActive)
            return;

        var parameters = new ModalParameters()
            .Add(nameof(DeleteRecurringExpense.PreText), preText)
            .Add(nameof(DeleteRecurringExpense.RecurringExpenseModel), expenseModel);

        var result = await Modal.Show<DeleteRecurringExpense>("Ta bort?", parameters).Result;

        if (result.Confirmed)
        {
            await GetRecurringExpenses();
        }
    }

    private async Task AddExpenseFromRecurringExpense(ExpenseModel expenseModel, EconomyPlanModel? economyPlanModel)
    {
        if (economyPlanModel is null || !economyPlanModel.IsActive)
            return;

        await ExpenseService.AddRecurringExpenseAsExpense(expenseModel, economyPlanModel);
        await RefreshExpenses();
    }

}