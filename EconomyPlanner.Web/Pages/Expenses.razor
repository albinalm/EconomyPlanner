@page "/expenses"
@using EconomyPlanner.Web.Services.Interfaces
@using EconomyPlanModel = EconomyPlanner.Web.Models.EconomyPlanModel
@using ExpenseModel = EconomyPlanner.Web.Models.ExpenseModel
@using System.Net.Sockets
@inject NavigationManager NavManager

<PageTitle>Expenses</PageTitle>

<h1>Current expenses</h1>
<br/>

<div>
    <b>Selected economy plan:</b>
</div>
<Dropdown TItem="EconomyPlanModel" OnSelected="@OnSelected">
    <InitialTip>@InitialEconomyPlanName</InitialTip>
    <ChildContent>
        @foreach (var plan in _economyPlanModels)
        {
            <DropdownListItem Item="@plan">@plan.Name</DropdownListItem>
        }
    </ChildContent>
</Dropdown>

<div class="alert alert-secondary mt-4">
    <div>
        <div class="row">
            <div class="col-md">
                <b>Type: </b>
            </div>
            <div class="col-md">
                <b>Name: </b>
            </div>
            <div class="col-md">
                <b>Amount: </b>
            </div>
            <div class="col-md">
            </div>
        </div>
        <hr/>
        @foreach (var expense in _expenseModels)
        {
            <div class="row">
                <div class="col-md text-left">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left" @onclick="@(_ => ShowEditTypePopup(expense))">@expense.ExpenseType</button>
                    </div>
                </div>
                <div class="col-md">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left" @onclick="@(_ => ShowEditNamePopup(expense))">@expense.Name</button>
                    </div>
                </div>
                <div class="col-md">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left" @onclick="@(_ => ShowEditAmountPopup(expense))">@expense.Amount</button>
                    </div>
                </div>
                <div class="col-md">
                    <button class="btn btn-danger btn-sm text-left" @onclick="@(_ => ShowDeletePopup("Are you sure you wish to delete ", expense))">
                        Delete
                    </button>
                </div>
            </div>
            <br/>
        }
    </div>
    <button class="btn btn-success text-left oi oi-plus" onclick="@ShowAddExpensePopup"></button>
</div>
<br/><hr/><br/>
<h4>Recurring expenses:</h4>
<div class="alert alert-secondary mt-4">
    <div>
        <div class="row">
            <div class="col-md">
                <b>Type: </b>
            </div>
            <div class="col-md">
                <b>Name: </b>
            </div>
            <div class="col-md">
                <b>Amount: </b>
            </div>
            <div class="col-md">
            </div>
        </div>
        <hr/>
        @foreach (var recurringExpense in _recurringExpenses)
        {
            <div class="row">
                <div class="col-md text-left">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left" @onclick="@(_ => ShowEditTypePopup(recurringExpense))">@recurringExpense.ExpenseType</button>
                    </div>
                </div>
                <div class="col-md">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left" @onclick="@(_ => ShowEditNamePopup(recurringExpense))">@recurringExpense.Name</button>
                    </div>
                </div>
                <div class="col-md">
                    <div class="span2">
                        <button class="btn btn-dark btn-block btn-sm text-left" @onclick="@(_ => ShowEditAmountPopup(recurringExpense))">@recurringExpense.Amount</button>
                    </div>
                </div>
                <div class="col-md">
                    <button class="btn btn-danger btn-sm text-left" @onclick="@(_ => ShowDeletePopup("Are you sure you wish to delete ", recurringExpense))">
                        Delete
                    </button>
                </div>
            </div>
            <br/>
        }
    </div>
    <button class="btn btn-success text-left oi oi-plus"></button>
</div>

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    [Inject]
    private IEconomyPlanService EconomyPlanService { get; set; } = null!;

    [Inject]
    private IExpenseService ExpenseService { get; set; } = null!;

    [Inject]
    private IHouseholdService HouseholdService { get; set; } = null!;

    private EconomyPlanModel? SelectedEconomyPlan { get; set; } = null;
    private List<ExpenseModel> _expenseModels = new();
    private List<ExpenseModel> _recurringExpenses = new();
    private List<EconomyPlanModel> _economyPlanModels = new();
    private string InitialEconomyPlanName { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        if (!await HouseholdService.HasSavedLogin())
            NavManager.NavigateTo("/login");
        else
            await InitializePage();
    }

    private async Task InitializePage()
    {
        await GetEconomyPlanModes();
        if (_economyPlanModels.Any())
        {
            SelectedEconomyPlan = _economyPlanModels.First();
            Console.WriteLine("Current economy plan!" + SelectedEconomyPlan.Name + " ID: " + SelectedEconomyPlan.Id);
            InitialEconomyPlanName = SelectedEconomyPlan.Name;
            _expenseModels = ExpenseService.GetExpenses(SelectedEconomyPlan).ToList();
            await GetRecurringExpenses();
        }
    }

    private async Task RefreshExpenses()
    {
        await GetEconomyPlanModes();
        if (_economyPlanModels.Any())
        {
            _expenseModels = ExpenseService.GetExpenses(_economyPlanModels.First()).ToList();
        }
    }

    private async Task GetRecurringExpenses()
    {
        _recurringExpenses = (await HouseholdService.GetRecurringExpenses()).ToList();
    }

    private async Task GetEconomyPlanModes()
    {
        _economyPlanModels = (await EconomyPlanService.GetEconomyPlans()).ToList();
    }

    private void OnSelected(EconomyPlanModel selection)
    {
        _expenseModels = ExpenseService.GetExpenses(selection).ToList();
        SelectedEconomyPlan = selection;
        Console.WriteLine("Current economy plan!" + SelectedEconomyPlan.Name + " ID: " + SelectedEconomyPlan.Id);
    }

    private async Task ShowDeletePopup(string preText, ExpenseModel expenseModel)
    {
        var parameters = new ModalParameters()
            .Add(nameof(DeleteExpense.PreText), preText)
            .Add(nameof(DeleteExpense.ExpenseModel), expenseModel);

        await Modal.Show<DeleteExpense>("Delete?", parameters).Result;
        await RefreshExpenses();
        await GetRecurringExpenses();
    }

    private async Task ShowEditAmountPopup(ExpenseModel expenseModel)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditExpenseAmount.ExpenseModel), expenseModel);

        await Modal.Show<EditExpenseAmount>("Edit", parameters).Result;

        await RefreshExpenses();
    }

    private async Task ShowEditNamePopup(ExpenseModel expenseModel)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditExpenseName.ExpenseModel), expenseModel);

        await Modal.Show<EditExpenseName>("Edit", parameters).Result;

        await RefreshExpenses();
    }

    private async Task ShowEditTypePopup(ExpenseModel expenseModel)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditExpenseType.ExpenseModel), expenseModel)
            .Add(nameof(EditExpenseType.ExpenseTypes), await ExpenseService.GetExpenseTypes());

        await Modal.Show<EditExpenseType>("Edit", parameters).Result;

        await RefreshExpenses();
    }

    private async Task ShowAddExpensePopup()
    {
        var parameters = new ModalParameters()
            .Add(nameof(AddExpenseForm.ExpenseTypes), await ExpenseService.GetExpenseTypes())
            .Add(nameof(AddExpenseForm.EconomyPlanModel), SelectedEconomyPlan!)
            .Add(nameof(AddExpenseForm.HouseholdGuid), await HouseholdService.GetSavedLogin());

             await Modal.Show<AddExpenseForm>("Add new expense", parameters).Result;
        await RefreshExpenses();
        await GetRecurringExpenses();
    }
}