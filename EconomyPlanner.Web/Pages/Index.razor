@inject NavigationManager NavManager
@page "/"
@using EconomyPlanner.Web.Services.Interfaces
@using EconomyPlanner.Web.Models
@using Syncfusion.Blazor.Charts;
@using Syncfusion.Blazor.Data
@using EconomyPlanner.Web.Extensions

<PageTitle>Ekonomisk översikt</PageTitle>

<h1 class="bi bi-stack text-success"> Ekonomisk översikt</h1>
<br/>
<Dropdown TItem="EconomyPlanModel" OnSelected="@OnSelected">
    <InitialTip>@InitialEconomyPlanName</InitialTip>
    <ChildContent>
        @foreach (var plan in _economyPlanModels)
        {
            <DropdownListItem Item="@plan">@plan.Name</DropdownListItem>
        }
    </ChildContent>
</Dropdown>
<hr/>
<br/>
<p class="text-dark">
    <b>Inkomster:</b>
</p>
<div class="alert alert-info mt-4">
    @foreach (var incomeType in IncomeTypes)
    {
        <span class="@GetIconFromType(incomeType)" aria-hidden="true"></span>
        <span class="text-nowrap">
            <b>@incomeType</b> @GetSumPerIncomeType(incomeType).ToNumberFormatString():-
        </span>
        <br/>
    }
    <br/>
    <p class="font-weight-bold float-left">Totalbelopp: @_incomeModels.Select(i => i.Amount).Sum().ToNumberFormatString():-</p>
    <br/>
</div>

<br/>

<p class="text-dark">
    <b>Utgifter:</b>
</p>
<div class="alert alert-info mt-4">
    @foreach (var expenseType in ExpenseTypes)
    {
        <span class="@GetIconFromType(expenseType)" aria-hidden="true"></span>
        <span class="text-nowrap">
            <b>@expenseType</b> @GetSumPerExpenseType(expenseType).ToNumberFormatString():-
        </span>
        <br/>
    }
    <br/>
    <p class="font-weight-bold float-left">Totalbelopp: @_expenseModels.Select(e => e.Amount).Sum().ToNumberFormatString():-</p>
    <br/>
</div>
<br/>
<br/>
<h4 class="@OverviewStyle">@OverviewCaption</h4>
<br/>
<hr/>
<br/>
<h2 class="bi bi-bar-chart-fill text-success font-weight-bold"> Genomsnittlig ekonomifördelning</h2>
<br/>
<br/>
<div class="row">
    <div class="col">
        <SfAccumulationChart Title="Genomsnittliga utgifter">
            <AccumulationChartTooltipSettings Enable="true"></AccumulationChartTooltipSettings>
            <AccumulationChartSeriesCollection>
                <AccumulationChartSeries DataSource="@_expensePieDetails" XName="Type" YName="Amount"
                                         Name="Type" InnerRadius="40%">
                    <AccumulationDataLabelSettings Name="AmountLabel" Visible="true" Position="AccumulationLabelPosition.Outside">
                        <AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
                        <AccumulationChartConnector Length="20px" Type="ConnectorType.Curve"></AccumulationChartConnector>
                    </AccumulationDataLabelSettings>
                </AccumulationChartSeries>
            </AccumulationChartSeriesCollection>
            <AccumulationChartLegendSettings Visible="true" Alignment="Alignment.Far"></AccumulationChartLegendSettings>
        </SfAccumulationChart>
    </div>
    <div class="col">
        <SfChart Title="Genomsnittliga utgifter kontra nuvarande utgifter per kategori" Palettes="@_averageCharPalettes">
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@_expenseAverageBarDetails" Name="Nuvarande belopp" XName="Type" YName="CurrentAmount" Type="ChartSeriesType.StackingColumn">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="LabelPosition.Bottom" Name="CurrentAmountReadable">
                            <ChartDataLabelFont FontWeight="600"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
                <ChartSeries DataSource="@_expenseAverageBarDetails" Name="Genomsnittligt belopp" XName="Type" YName="AverageAmount" Width="2" Opacity="0.6" Type="ChartSeriesType.Line">
                    <ChartMarker Visible="true" Height="10" Width="10">
                        <ChartDataLabel Visible="true" Fill="#ffffff" Name="AverageAmountReadable">
                            <ChartDataLabelBorder Width="1" Color="black"></ChartDataLabelBorder>
                            <ChartDataLabelFont Color="#121212"></ChartDataLabelFont>
                        </ChartDataLabel> 
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </div>
    <div class="col">
        <SfChart Title="Utgifter kontra inkomst per månad" Palettes="@_barChartPalettes">
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
            </ChartPrimaryXAxis>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@_expenseBarDetails" XName="Month" YName="Amount" Type="ChartSeriesType.StackingBar" Name="Kostnad" ColumnSpacing="0.1">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="LabelPosition.Top" Name="AmountReadable">
                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
                <ChartSeries DataSource="@_expenseBarDetails" XName="Month" YName="Savings" Type="ChartSeriesType.StackingBar" Name="Sparande" ColumnSpacing="0.1">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="LabelPosition.Top" Name="SavingsReadable">
                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>

            <ChartSeriesCollection>
                <ChartSeries DataSource="@_incomeBarDetails" XName="Month" YName="Amount" Type="ChartSeriesType.Bar" Name="Inkomst" ColumnSpacing="0.1">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="LabelPosition.Top" Name="AmountReadable">
                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </div>
</div>


<p class="font-italic form-control-sm">*Baserat på max de senaste 12 månaderna eller antal ekonomiplaner beroende på vilket som är högst</p>

@code{

    [Inject]
    private IEconomyPlanService EconomyPlanService { get; set; } = null!;

    [Inject]
    private IExpenseService ExpenseService { get; set; } = null!;

    [Inject]
    private IIncomeService IncomeService { get; set; } = null!;

    [Inject]
    private IHouseholdService HouseholdService { get; set; } = default!;

    private static bool HasUpdatedEconomyPlans { get; set; }
    private EconomyPlanModel? SelectedEconomyPlan { get; set; }
    private List<ExpenseModel> _expenseModels = new();
    private List<IncomeModel> _incomeModels = new();
    private List<EconomyPlanModel> _economyPlanModels = new();

    private List<ExpensePieChart> _expensePieDetails = new();

    private List<TransactionBarChart> _expenseBarDetails = new();

    private List<ExpenseAveragePerCategoryChart> _expenseAverageBarDetails = new();

    private List<TransactionBarChart> _incomeBarDetails = new();

    private List<EconomyPlanModel> _activeEconomyPlans = new();

    private string InitialEconomyPlanName { get; set; } = "";
    private IEnumerable<string> IncomeTypes { get; set; } = Enumerable.Empty<string>();
    private IEnumerable<string> ExpenseTypes { get; set; } = Enumerable.Empty<string>();
    private string OverviewCaption => GetOverviewCaption(_incomeModels.Select(i => i.Amount).Sum() - _expenseModels.Select(e => e.Amount).Sum()).caption;
    private string OverviewStyle => GetOverviewCaption(_incomeModels.Select(i => i.Amount).Sum() - _expenseModels.Select(e => e.Amount).Sum()).style;

    private readonly string[] _barChartPalettes = { "#edbf28", "#949494", "#30a9d1" };
    private readonly string[] _averageCharPalettes = { "#edbf28", "#303030" };

    protected override async Task OnInitializedAsync()
    {
        if (!await HouseholdService.HasSavedLogin())
        {
            NavManager.NavigateTo("/login", forceLoad: true);
        }
        else
        {
            if (!await HouseholdService.AttemptLogin(await HouseholdService.GetGuid()))
            {
                NavManager.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                await InitializePage();
            }
        }
    }

    private async Task InitializePage()
    {
        if (!HasUpdatedEconomyPlans)
        {
            await SetupActiveEconomyPlans();
        }

        await GetEconomyPlanModels();

        if (_activeEconomyPlans.Any())
        {
            SelectedEconomyPlan = _activeEconomyPlans.First();
            InitialEconomyPlanName = SelectedEconomyPlan.Name;
            _expenseModels = (await ExpenseService.GetExpenses(SelectedEconomyPlan)).ToList();
            _incomeModels = (await IncomeService.GetIncomes(SelectedEconomyPlan)).ToList();
            IncomeTypes = await IncomeService.GetIncomeTypes();
            ExpenseTypes = await ExpenseService.GetExpenseTypes();
            await PopulateCharts();
        }
    }

    private async Task PopulateCharts()
    {
        await PopulateExpenseCharts();
        await PopulateTransactionBar();
    }

    private async Task PopulateExpenseCharts()
    {
        var guid = await HouseholdService.GetGuid();

        if (guid is null) return;

        var totalExpenses = (await ExpenseService.GetAllExpenseModelsFromLastYearEconomyPlans(guid)).ToList();

        var expensePieData = new List<ExpensePieChart>();
        var expenseAverageBarData = new List<ExpenseAveragePerCategoryChart>();

        foreach (var expenseType in ExpenseTypes)
        {
            var current = GetSumPerExpenseType(expenseType);
            var total = totalExpenses.Where(expense => expense.ExpenseType == expenseType).Select(expense => expense.Amount).Sum();
            var average = total / _economyPlanModels.Take(12).Count();

            expenseAverageBarData.Add(new ExpenseAveragePerCategoryChart
                                      {
                                          Type = expenseType,
                                          CurrentAmount = current,
                                          AverageAmount = average,
                                          CurrentAmountReadable = $"{current.ToRoundedNumberFormatString()}:-",
                                          AverageAmountReadable = $"{average.ToRoundedNumberFormatString()}:-"
                                      });

            expensePieData.Add(new ExpensePieChart
                               {
                                   Type = expenseType,
                                   Amount = average,
                                   AmountLabel = GetAmountLabel(total, totalExpenses.Sum(expense => expense.Amount))
                               });
        }

        _expensePieDetails = expensePieData;
        _expenseAverageBarDetails = expenseAverageBarData;
    }

    private static string GetAmountLabel(decimal amount, decimal totalAmount)
    {
        var percent = amount / totalAmount * 100;
        return $"{Math.Round(percent, 0)}%";
    }

    private async Task PopulateTransactionBar()
    {
        var guid = await HouseholdService.GetGuid();

        if (guid is null) return;

        var economyPlans = _economyPlanModels.OrderBy(e => e.EndDate).TakeLast(12);

        var expenseBarData = new List<TransactionBarChart>();
        var incomeBarData = new List<TransactionBarChart>();

        foreach (var economyPlan in economyPlans)
        {
            var month = DateTime.Parse(economyPlan.EndDate).ToString("MMMM").FirstCharToUpper();

            var expenseModels = (await ExpenseService.GetExpenses(economyPlan)).ToList();
            var incomeModels = await IncomeService.GetIncomes(economyPlan);

            var totalIncomeSum = incomeModels.Sum(incomeModel => incomeModel.Amount);

            var totalSavingsSum = expenseModels.Where(e => e.ExpenseType.ToLowerInvariant() == "sparande").Sum(e => e.Amount);

            var totalExpenseSum = expenseModels.Sum(expenseModel => expenseModel.Amount) - totalSavingsSum;

            expenseBarData.Add(new TransactionBarChart
                               {
                                   Amount = totalExpenseSum, 
                                   Month = month, 
                                   Savings = totalSavingsSum, 
                                   AmountReadable = $"{totalExpenseSum.ToRoundedNumberFormatString()}:-", 
                                   SavingsReadable = $"{totalSavingsSum.ToRoundedNumberFormatString()}:-"
                               });
            
            incomeBarData.Add(new TransactionBarChart
                              {
                                  Amount = totalIncomeSum, 
                                  Month = month,
                                  AmountReadable = $"{totalIncomeSum.ToRoundedNumberFormatString()}:-"
                              });
        }

        _incomeBarDetails = incomeBarData;
        _expenseBarDetails = expenseBarData;
    }

    private async Task GetEconomyPlanModels()
    {
        _economyPlanModels = (await EconomyPlanService.GetEconomyPlans()).ToList();
        _activeEconomyPlans = _economyPlanModels.Where(ep => ep.IsActive).ToList();
    }

    private async Task SetupActiveEconomyPlans()
    {
        await EconomyPlanService.SetupActiveEconomyPlans();
        HasUpdatedEconomyPlans = true;
    }

    private string GetIconFromType(string transactionType)
    {
        return transactionType.ToLowerInvariant() switch
               {
               "shopping" => "bi-basket-fill",
               "hushåll" => "bi-house-heart-fill",
               "el" => "bi-lightning-fill",
               "försäkring" => "bi-shield-fill-check",
               "hyra" => "bi-key-fill",
               "abonnemang" => "bi-arrow-clockwise",
               "lön" => "bi-cash-stack",
               "återbetalning" => "bi-bag-plus-fill",
               "gåva" => "bi-box2-heart-fill",
               "lån" => "bi-bank2",
               "sparande" => "bi-graph-up",
               _ => "bi-patch-question-fill"};
    }

    private decimal GetSumPerExpenseType(string? expenseType)
    {
        return expenseType is null ? 0 : _expenseModels.Where(e => e.ExpenseType == expenseType).Select(e => e.Amount).Sum();
    }

    private decimal GetSumPerIncomeType(string incomeType)
    {
        return _incomeModels.Where(e => e.IncomeType == incomeType).Select(e => e.Amount).Sum();
    }

    private async Task OnSelected(EconomyPlanModel selection)
    {
        _expenseModels = (await ExpenseService.GetExpenses(selection)).ToList();
        _incomeModels = (await IncomeService.GetIncomes(selection)).ToList();
        SelectedEconomyPlan = selection;

        await PopulateCharts();
    }

    private static (string caption, string style) GetOverviewCaption(decimal result)
    {
        return result >= 0 ? ($"Beräknat belopp att få över: {result.ToRoundedNumberFormatString()}:-", "text-success") : ($"Beräknad skuld: {result.ToRoundedNumberFormatString()}:-", "text-danger");
    }

    public class ExpensePieChart
    {
        public string? Type { get; set; }
        public decimal Amount { get; set; }
        public string? AmountLabel { get; set; }
    }

    public class ExpenseAveragePerCategoryChart
    {
        public string? Type { get; set; }
        public decimal CurrentAmount { get; set; }
        public string? CurrentAmountReadable { get; set; }
        public decimal AverageAmount { get; set; }
        public string? AverageAmountReadable { get; set; }
    }

    public class TransactionBarChart
    {
        public string? Month { get; set; }
        public decimal Amount { get; set; }
        public string? AmountReadable { get; set; }
        public decimal Savings { get; set; }
        public string? SavingsReadable { get; set; }
    }

}