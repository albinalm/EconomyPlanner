@using EconomyPlanner.Web.Services.Interfaces
@using EconomyPlanner.Web.Models

<p>@PreText<b>@RecurringExpenseModel.Name</b>?</p>
<p hidden="@HideSeveralExpensesMessage" class="font-italic text-danger">Denna återkommande utgift är kopplad till flera utgifter. Genom att ta bort denna kommer du bevara de tidigare kopplade utgifterna.</p>
<br/>
<button class="btn btn-warning text-center" @onclick="Delete">Ta bort</button>
<button class="btn btn-info text-center" @onclick="Close">Avbryt</button>

@code
{
    public bool HideSeveralExpensesMessage { get; set; } = true;
    
    [Parameter]
    public ExpenseModel RecurringExpenseModel { get; set; } = new();

    [Parameter] public string? PreText { get; set; }
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    
    [Inject]
    private IExpenseService ExpenseService { get; set; } = null!;
    
    private async Task Delete()
    {
        await ExpenseService.DeleteRecurringExpense(RecurringExpenseModel);
        
        await Close();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await CheckIfRecurringExpenseIsLinkedToSeveralExpenses();
    }
    
    private async Task CheckIfRecurringExpenseIsLinkedToSeveralExpenses()
    {
        HideSeveralExpensesMessage = (await ExpenseService.GetAllExpensesLinkedToRecurringExpense(RecurringExpenseModel)).Count() <= 1;
    }
    
    private async Task Close() => await BlazoredModal.CloseAsync();
}
