@using EconomyPlanner.Web.Models
@using EconomyPlanner.Web.Services.Interfaces
<p>Tidigare typ:</p>
<input class="form-control" type="text" placeholder="@RecurringExpenseModel.ExpenseType" readonly>
<br/>
<p>Ny typ:</p>
  <div class="form-group">
      <select class="form-control" id="transactionTypeSelector" onchange="@SelectorOnChange">
          @foreach (var expenseType in ExpenseTypes)
          {
              <option>@expenseType</option>
          }
      </select>
  </div>
<br/>
<button class="btn btn-dark text-center" @onclick="Save">Spara</button>
@code
{
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    [Parameter]
    public ExpenseModel RecurringExpenseModel { get; set; } = new();
    
    [Parameter]
    public List<string> ExpenseTypes { get; set; } = new();
    
    [Inject]
    private IExpenseService ExpenseService { get; set; } = null!;

    private string NewRecurringExpenseType { get; set; } = "";

    private async Task Save()
    {
        RecurringExpenseModel.ExpenseType = NewRecurringExpenseType;
        
        await ExpenseService.UpdateRecurringExpense(RecurringExpenseModel);
        
        await Close();
    }
    
    private async Task Close() => await BlazoredModal.CloseAsync();

    private void SelectorOnChange(ChangeEventArgs e)
    {
        NewRecurringExpenseType = e.Value?.ToString() ?? string.Empty;
    }
    
    protected override async Task OnInitializedAsync()
    {
        NewRecurringExpenseType = ExpenseTypes.FirstOrDefault() ?? string.Empty;
    }
}