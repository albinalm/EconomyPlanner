@using EconomyPlanner.Web.Models
@using EconomyPlanner.Web.Services.Interfaces

<p>Namn:</p>
<input class="form-control" type="text" @bind="NewRecurringExpense.Name">
<br/>
<p>Belopp:</p>
<input class="form-control" type="number" @bind="NewRecurringExpense.Amount">
<br/>
<p>Typ:</p>
<div class="form-group">
    <select class="form-control" id="transactionTypeSelector" onchange="@SelectorOnChange">
        @foreach (var expenseType in ExpenseTypes)
        {
            <option>@expenseType</option>
        }
    </select>
</div>
<br/>
<button class="btn btn-dark text-center" @onclick="AddExpense">Lägg till</button>
@code
{
    [Inject]
    private IExpenseService ExpenseService { get; set; } = null!;
    
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    [Parameter]
    public List<string> ExpenseTypes { get; set; } = new();

    [Parameter]
    public string HouseholdGuid { get; set; } = "";
    
    private CreateExpenseModel NewRecurringExpense { get; set; } = new();

    private void SelectorOnChange(ChangeEventArgs e)
    {
        NewRecurringExpense.ExpenseType = e.Value?.ToString() ?? string.Empty;
    }

    private async Task AddExpense()
    {
        NewRecurringExpense.HouseholdGuid = HouseholdGuid;
        
        await ExpenseService.AddRecurringExpense(NewRecurringExpense);
        await Close();
    }
    
    protected override async Task OnInitializedAsync()
    {
        NewRecurringExpense.ExpenseType = ExpenseTypes.FirstOrDefault() ?? string.Empty;
    }
    
    private async Task Close() => await BlazoredModal.CloseAsync();
}