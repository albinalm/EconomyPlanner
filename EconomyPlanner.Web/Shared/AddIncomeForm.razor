@using EconomyPlanner.Web.Models
@using EconomyPlanner.Web.Services.Interfaces

<p>Name:</p>
<input class="form-control" type="text" @bind="NewIncome.Name">
<br/>
<p>Amount:</p>
<input class="form-control" type="number" @bind="NewIncome.Amount">
<br/>
<p>Income type:</p>
<div class="form-group">
    <select class="form-control" id="transactionTypeSelector" onchange="@SelectorOnChange">
        @foreach (var incomeType in IncomeTypes)
        {
            <option>@incomeType</option>
        }
    </select>
</div>
<br/>
<div class="form-check">
    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onchange="eventArgs => { RecurringCheckboxClicked(eventArgs.Value); }">
    <label class="form-check-label" for="flexSwitchCheckDefault">Make recurring</label>
</div>
<br/>
<div hidden="@HideRecurringForm">
    <p>Recurring amount:</p>
    <input class="form-control" type="number" @bind="NewIncome.RecurringAmount">
</div>
<br/>
<button class="btn btn-dark text-center" @onclick="AddIncome">Add</button>
@code
{
    [Inject]
    private IIncomeService IncomeService { get; set; } = null!;
    
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    [Parameter]
    public List<string> IncomeTypes { get; set; } = new();

    [Parameter]
    public EconomyPlanModel EconomyPlanModel { get; set; } = new();

    [Parameter]
    public string HouseholdGuid { get; set; } = "";
    
    private CreateIncomeModel NewIncome { get; set; } = new();

    private bool HideRecurringForm => !NewIncome.IsRecurring;

    private void SelectorOnChange(ChangeEventArgs e)
    {
        NewIncome.IncomeType = e.Value?.ToString() ?? string.Empty;
    }
    
    private void RecurringCheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            NewIncome.IsRecurring = true;
        }
        else
        {
            NewIncome.IsRecurring = false;
        }
    }

    private async Task AddIncome()
    {
        NewIncome.EconomyPlanId = EconomyPlanModel.Id;
        NewIncome.HouseholdGuid = HouseholdGuid;
        
        await IncomeService.AddIncome(NewIncome);
        await Close();
    }
    
    protected override async Task OnInitializedAsync()
    {
        NewIncome.IncomeType = IncomeTypes.FirstOrDefault() ?? string.Empty;
    }
    
    private async Task Close() => await BlazoredModal.CloseAsync();
}